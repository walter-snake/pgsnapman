#!/bin/bash

# pgsnap_dedup: deduplicate a directory using symlinks
#
# $1 full path to directory to dedup
# $2 verbosity [VERBOSE|empty]
#

# ======================================
# Initialization
# ======================================
VERBOSITY=$2

# Get the script directory (must do this first)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Load functions, will also perform initialization operations
. ${SCRIPTPATH}/pgsnap_lib

# ===================================
# MAIN
# ===================================

# Check if MD5PROG, exist, otherwise clean exit.
if [ ! -e "${MD5PROG}" ]; then
  exit 0
fi

# Start message
snaplog "INFO" "processing - dump: ${1}"

# Build md5 index of the specified directory
find ${1} -type f -name '*.dat.gz' -exec ${MD5PROG} ${MD5OPTIONS} {} \; > ${1}.md5

# Init dumpsize, dedupsize
dumpsize=`stat -f %z ${1}/toc.dat`
dedupsize=${dumpsize}
while read line;
do
  md5=$(echo "${line}" | cut -d ' ' -f 1)
  file=$(echo "${line}" | cut -d ' ' -f 2)
  index1=${line:0:1}
  index2=${line:1:1}
  filesize=`stat -f %z ${file}`
  fileindex=${DEDUPDATA}/${index1}/${index2}
  let "dumpsize = dumpsize + filesize"
  if [ -e "${fileindex}/${md5}" ];
  then
    # echo "contents available, linking ["${file}" -> "${md5}"]"
    rm ${file}
  else
    # echo "creating contents, linking ["${file}" -> "${md5}"]"
    let "dedupsize = dedupsize + filesize"
    mkdir -p ${fileindex}
    mv ${file} ${fileindex}/${md5}
  fi
  ln -s ${fileindex}/${md5} ${file}
done < ${1}.md5

sizeperc=`echo "${dumpsize} ${dedupsize}" | awk '{ printf "%.2f", ($2/$1) * 100; }'`
snaplog "INFO" "finished - dump: ${1} - remaining size ${sizeperc}%"

# Also put a message in the catalog database (not important enough to keep)
echo -e "`date '+%Y%m%dT%H%M%S'`\tINFO\tpgsnap_dedup\tfinished - dump: ${1} - remaining size ${sizeperc}%" > ${ROOTDIR}/upload/$$_pgsnap_dedup.message.dat
exit 0;

