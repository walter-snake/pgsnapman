#!/bin/bash

# pgsnap_restore: starts postgres restore
#                     must run on a backup node, with passwordless (.pgpass does the job) to all database servers
#
# $1 restore job id
# $2 backup path to use [<full_backup_path>|<catalog_id>] (for trigger based starts you must use the full path, as
#    you don't know the catalog id, and the neccessary data is most likely not yet present in the catalog)
# $3 verbosity [VERBOSE|SILENT]
# $4 startup type [CRON|SINGLE|TRIGGER]
#      

# ======================================
# Initialization
# ======================================
JOBID=$1
DUMP=$2
VERBOSITY=$3
STARTTYPE=$4

# Get the script directory (must do this first)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Check cmd args
if [ "${STARTTYPE}" == "" ]; then
  echo "ERROR pgsnap_restore no startup type provided"
  cleanupexit 1
fi

# Catalog database needed?
PGSCDB_REQUIRED=YES

# Load functions, will also perform initialization operations
. ${SCRIPTPATH}/pgsnap_lib

# TOOL_LOG
TOOL_LOG=${LOGDIR}/pgsnap_restore.log

# ==========================================
# Functions
# ==========================================

# Informational helper functions
# ------------------------------

# Retrieve selected backup status from local cache
# $1 path to backup *.catalog.dat file with catalog info (as uploaded)
function getbackupstatus {
  local status=`cat "$1" | cut -d $'\t' -f4`
  echo "${status}"
}

# Retrieve the restore job info from the catalog
# $1 restore job id
function getrestorejob {
  local data
  local sql="SELECT id, pgsnap_catalog_id, dest_dbname, restoretype, restoreschema, 
       restoreoptions, existing_db, cron, status_restorejob, comment, 
       jobtype, dns_name, pgport, pgsql_superuser, role_handling, tblspc_handling, 
       status_pgsqlinstance
  FROM vw_restorejob_instance
  WHERE id = ${1};"
  data=$( catdbquery "${sql}" )
  echo "${data}"
}

# Get the full dumppath from the backup catalog
# $1 dump catalog id
function getdumppathfromcatalog {
  local data
  local sql="SELECT bu_location || '/' || bu_name FROM pgsnap_catalog WHERE id = $1 AND status = 'SUCCESS';"
  data=$( catdbquery "${sql}" )
  echo "${data}"
}

# Set postgres server version variable
function setpgbinpath {
  # Check postgres server version and binary availability 
  PGVERSION=$(getpgversion "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}")
  if [ "${PGVERSION}" == "" ]; then
    log "ERROR" "job id ${JOBID} - could not connect to postgres instance: ${pgsqlsuperuser}@${pgsqlfqdn}:${pgsqlport}/${MAINTDB}"
  else
    eval pgbinvar=PGBIN${PGVERSION}
    PGBIN=${!pgbinvar}
  fi
  # check if psql exists
  if [ ! -e ${PGBIN}/psql ]; then
    log "ERROR" "job id ${JOBID} - job can not run - pg tools not found, check PGBINxx paths in config file ${CONFIGFILE}"
  fi
}

# Inserts job id and dump name
function logstart {
  local sql="select put_restorelog(${JOBID}, '${DUMP}');"
  LOGID=$( catdbquery "${sql}" )
  if [ "${LOGID}" == "" ]; then
    MSG="job id ${JOBID} - could not write restore log entry, exit"
    ERRCODE=1
  else
    ERRCODE=0
  fi
}

# Update with result, also write snaplog and log essage
# $1 status
# $2 message
function logend {
  local bupath=${DUMP}
  if [[ "${DUMP}" =~ ^[0-9]+$ ]]; then
    bupath="cat_id=${DUMP}"
  fi
  local srcdbname=$(getfieldvalue "${DBSETTINGS}" 1)
  local sql="select set_restorelog(${LOGID}, '${1}', '${2}', '${bupath}', '${BUWORKERID}', '${pgsqlfqdn}', '${pgsqlport}', '${dbname}', '${restoreschema}', '${restoretype}', '${srcdbname}');"
  log "${1}" "${2}"
  snaplog "${1}" "${2}"
  talk "${1} ${2}"
  catdbexecute "${sql}"
}

# Db management helper functions
# ------------------------------

# Lockout all users (except the superuser, of course)
# $1 database name
function lockoutusers {
  # disable connections
  log "INFO" "prevent new connections to database ${1}"
  dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "UPDATE pg_catalog.pg_database SET datallowconn=false WHERE datname='${1}'" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
  # close connections
  # get list of connected users, loop through and terminate backends
  log "INFO" "terminate existing connections on database $1"
  dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "select pg_terminate_backend(pid) from pg_stat_activity where datname='${1}'" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
  ERRCODE=$SQLERROR
  if [ $ERRCODE -gt 0 ]; then MSG="could not successfully terminate clients on database ${1}"; fi
}

# Convert database acls to sql
# $1 database name
function dbacl2sql {
  DBACL=${TEMPDIR}/$$.pgsnap_restore_dbacl.sql
  if [ ! -e "${DUMP}.database_acl.list" ]; then
    return
  fi

  local c=`cat "${DUMP}.database_acl.list" | wc -l | sed 's/ //g'`
  if [ ${c} -gt 0 ]; then
    echo "REVOKE ALL ON DATABASE ${1} FROM public;" > ${DBACL}
    while read line; do
      local acl="$(getfieldvalue ${line} 3)"
      local role="$(getfieldvalue ${line} 2)"
      if [ "${role}" == "" ]; then
        role="public"
      fi
      echo "REVOKE ALL ON DATABASE ${1} FROM ${role};" >> ${DBACL}
      if [[ "${acl}" =~ "C" ]]; then
        echo "GRANT CREATE ON DATABASE ${1} TO ${role};" >> ${DBACL}
      fi
      if [[ "${acl}" =~ "T" ]]; then
        echo "GRANT TEMP ON DATABASE ${1} TO ${role};" >> ${DBACL}
      fi
      if [[ "${acl}" =~ "c" ]]; then
        echo "GRANT CONNECT ON DATABASE ${1} TO ${role};" >> ${DBACL}
      fi
    done < "${DUMP}.database_acl.list"
  fi
}

# Set acl and allow connections
# $1 database name
function setaclallowconnect {
  log "INFO" "set acl and allow new connections to database ${1}"
  DBACL=""
  dbacl2sql "${1}"
  if [ -e "${DBACL}" ]; then
    dbexecutefromfile "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "${DBACL}" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
  fi
  dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "UPDATE pg_catalog.pg_database SET datallowconn=true WHERE datname='${1}'" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
}

# Drop database
# $1 database name
function dropdatabase {
  # throw everyone out
  lockoutusers $1
  if [ ${ERRCODE} -gt 0 ]; then
    return
  else
   talk "dropping database $1"
   log "INFO" "dropping database $1"
    # drop, this should succeed, as all connections are dead, and no one can be connected any more (well, a superuser)
    # If it doesn succeed, we're in trouble.
    dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "DROP DATABASE IF EXISTS \"${1}\"" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
    ERRCODE=$SQLERROR
    if [ ${ERRCODE} -eq 0 ]; then
      log "INFO" "database $1 dropped successfully (or did not exist at all)"
    else
      log "ERROR" "error while dropping database $1"
    fi
  fi
}

# Rename database
# $1 source database name
# $2 target database name
function renamedatabase {
  # check if it exists
  if [ "$(dbexists ${pgsqlhost} ${pgsqlport} ${pgsqlsuperuser} ${MAINTDB} $1 )" == "0" ]; then
    log "INFO" "database $1 does not exist, nothing to rename (not an error)"
    ERRCODE=0
    return
  fi

  # throw everyone out
  lockoutusers $1
  if [ ${ERRCODE} -gt 0 ]; then 
    MSG="impossible to complete RENAME operation on database ${1}";
    return
  fi

  log "INFO" "rename database $1->$2"
  talk "renaming database $1->$2"
  # rename, this should succeed, as all connections are dead, and no one can be connected any more (well, a superuser)
  dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "ALTER DATABASE \"${1}\" RENAME TO \"${2}\"" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
  ERRCODE=$SQLERROR
  if [ ${ERRCODE} -eq 0 ]; then
    log "INFO" "database $1 renamed successfully"
  else
    log "ERROR" "error while renaming database $1->$2"
  fi
}

# Create a role, skips setting password when role already exists
# $1 role name (should be sanitized, without double quotes)
function createrole {
  local sql="SELECT count(*) from pg_catalog.pg_roles WHERE rolname = '${1}';"
  local c=$( dbquery "{pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "${sql}" )
  # not present: create from information in globals dump
  if [ "$c" == "1" ]; then
    talk "skip existing role: ${1}"
  else
    talk "create role:        ${1}"
    # load cluster globals dump into psql, filtered for this role
    cat "${DUMP}.cluster_globals.sql" | ${GRPPROG} ${GRPFLG} "^((ALTER\ ROLE|CREATE\ ROLE))\ \"?${1}\"?(\;|\ ).*" | ${PGBIN}/psql ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --dbname=${MAINTDB} --no-password --output=/dev/null 2> /dev/null
  fi
}

# Set the DBSETTINGS datarow, with database global settings
#   datname, owner, encoding, collate, ctype, acl_rights, dattablespace
function setDBSETTINGS {
  DBSETTINGS=`cat "${DUMP}.database_settings.list"`
}

# Create database
# $1 target database name
# $2 use tablespace [USE_TBLSPC|NO_TBLSPC]
function createdatabase {
  # create the database
  if [ "$2" == "USE_TBLSPC" ] &&  [ "$(getfieldvalue "${DBSETTINGS}" 7)" != "" ]; then
    local tblspc="--tablespace=$(getfieldvalue "${DBSETTINGS}" 7)"
  fi
  log "INFO" "creating database $1"
  ${PGBIN}/createdb ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --maintenance-db=${MAINTDB} -E $(getfieldvalue "${DBSETTINGS}" 3) --lc-collate=$(getfieldvalue "${DBSETTINGS}" 4) --lc-ctype=$(getfieldvalue "${DBSETTINGS}" 5) --template=template0 ${tblspc} "$1"  >> ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log 2>&1
  echo $?
}

# Create schema
# $1 schema name
function createschema {
  local ec=1
  log "INFO" "creating schema: ${restoreschema}"
  # strip the quotes
  local schema=$(echo ${restoreschema} | sed 's/"//g')
  # 2 modes: when schema creation info is present in the dump, use it, otherwise, just create one (owner will be the owner of the database, no acl)
  # 1: no information (we inspect the dump here without the schema restriction!)
  if [ "`${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | grep SCHEMA`" == "" ]; then
    SQLERROR=1
    local sql='CREATE SCHEMA '${restoreschema}' AUTHORIZATION '"$(getfieldvalue "${DBSETTINGS}" 2)"';'
    dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${RESTOREDB}" "${sql}" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
    ec=$SQLERROR
  else
    # collect toc entries for this schema
    ${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | ${GRPPROG} ${GRPFLG} "SCHEMA\ -\ ${schema}\ " > ${TEMPDIR}/$$.0.pgsnap_restore.schema
    ${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | ${GRPPROG} ${GRPFLG} "COMMENT\ -\ SCHEMA\ ${schema}\ " >> ${TEMPDIR}/$$.0.pgsnap_restore.schema
    ${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | ${GRPPROG} ${GRPFLG} "ACL\ -\ ${schema}\ " >> ${TEMPDIR}/$$.0.pgsnap_restore.schema
    # do the restore, using these entries
    ${PGBIN}/pg_restore ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --dbname=${RESTOREDB} -L ${TEMPDIR}/$$.0.pgsnap_restore.schema ${DUMP} >> ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log 2>&1
    ec=$?
  fi
  echo $ec
}

# Set database owner
# $1 target database name
function setdatabaseowner {
  log "INFO" "setting owner on database $1 to $(getfieldvalue "${DBSETTINGS}" 2)"
  # Set owner (failure does not produce an error)
  local sql="ALTER DATABASE \"$1\" OWNER TO \"$(getfieldvalue "${DBSETTINGS}" 2)\";" 
  dbexecute "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "${sql}" "${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"
}

# Create the roles, neccessary for this database
function prepareroles {
  log "INFO" "preparing roles for restore job ${JOBID}"
  # check and create database owner
  createrole $(getfieldvalue "${DBSETTINGS}" 2)
  # check and create other roles
  # a bit more complex: read schema, and find all alter owner, grant and revoke rows
  # use pg_restore to read the schema, and grep relevant records
  ${PGBIN}/pg_restore --schema-only ${restoreoptions} "${DUMP}" | ${GRPPROG} ${GRPFLG} '^((GRANT|REVOKE|ALTER.*OWNER\ TO))' | awk '{if ($1 == "ALTER") print $6; else print $7;}' | grep -iv 'PUBLIC' | sed 's/;//'| sort > ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.roles_temp
  # add roles from database acl when we need them
  if [ "${DIRECTRESTORE}" == "NO" ]; then
    cat "${DUMP}.database_acl.sql" | awk '{print $7}' | sed 's/;//' | grep -iv 'public' >> ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.roles_temp
  fi
  cat ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.roles_temp | sort > ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.roles
  # read user names, create
  local line
  local linetrim
  local previous
  while read line; do
    if [ "${line}" != "${previous}" ]; then
      linetrim=`echo ${line} | sed 's/"//g'`
      createrole "${linetrim}"
    fi
    previous=${line}
  done < ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.roles
}

# Checks every required tablespace
function checktablespaces {
  log "INFO" "verifying tablespaces for restore job ${JOBID} (original database: ${dbname})"
  ${PGBIN}/pg_restore --schema-only ${restoreoptions} "${DUMP}" | ${GRPPROG} ${GRPFLG} "^SET\ default_tablespace\ \=\ .*[^'];" | awk '{print $4}' | sed 's/;//'| sort > ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.tablespaces
  # read user names, create
  local line
  local linetrim
  local previous
  while read line; do
    if [ "${line}" != "${previous}" ]; then
      linetrim=`echo ${line} | sed 's/"//g'`
      hastablespace "${linetrim}"
    fi
    previous=${line}
  done < ${TEMPDIR}/$$.${JOBID}.pgsnap_restore.tablespaces
}

# Checks if a tablespace exists
# $1 tablespace name (should be sanitized, without double quotes)
function hastablespace {
  local sql="SELECT count(*) from pg_catalog.pg_tablespace WHERE spcname = '${1}';"
  local c=$( dbquery "{pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "${sql}" )
  # not present: break out
  if [ "$c" == "0" ]; then
    ERRCODE=1
    MSG="required tablespace does not exist: ${1}"
    talk "${MSG}"
    logend "ERROR" "${MSG}"
  else
    talk "required tablespace found: ${1}"
  fi
}

# Restore procedures
# --------------------------

# SQL restore
function run_sql_restore {
  snaplog "INFO" "starting cluster dump restore: psql ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --dbname=${MAINTDB} ${restoreoptions}"; 
  gunzip -c ${DUMP}.sql | ${PGBIN}/psql ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --dbname=${MAINTDB} ${restoreoptions} --output=/dev/null  >> ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log 2>&1
  if [ "$?" == "0" ]; then
    snaplog "INFO" "finished restoring cluster dump"; 
    RESULT="COMPLETED"
  else
    snaplog "ERROR" "errors while restoring cluster dump"; 
  fi
}

# DIR dump restore
function run_dir_restore {
  # Load the settings for this dump
  setDBSETTINGS

  # Various options, makes it a bit complex
  # DATA ONLY: objects exist, do nothing with rights and object creation
  # dump of a specific schema: do prepare roles, but not on the database level, omit setting database acl's, no temp db
  # Same for restore of a specific schema!
  # Check if DATABASE creation data is present in the dump toc, if not, restore straight into target, this is typically the case
  # when doing a partial restore (table, schema, or based on an partial dump):
  # Due to schema quoting difficulties, we add a specific check on schema (knowing that when specifying a schema, the database
  # create option is NEVER available)
  if [ "`${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | grep DATABASE`" == "" ] || [ "${restoreschema}" != "*" ]; then
    DIRECTRESTORE=YES
    RESTOREDB="${dbname}"
  else
    DIRECTRESTORE=NO
    RESTOREDB="${dbname}_$$"
  fi

  # The entire following block must be skipped when a DATAonly restore is requested, it is al structure related stuff
  if [ "${restoretype}" != "DATA" ]; then
    # When requested, prepare roles (only a little useless work when doing DATA only, maybe we process too many roles, but that's not too bad)
    if [ "${rolehandling}" == "USE_ROLE" ]; then
      prepareroles
    fi
    # and tablespaces, only when not data only restore (tablespaces are verified only)
    if [ "${tblspchandling}" == "USE_TBLSPC" ] && [ "${restoretype}" != "DATA" ]; then
      checktablespaces
      if [ "${ERRCODE}" != "0" ]; then return; fi
    fi

    # Drop database before creation (risky, but possible, could come in handy when space is restricted)
    if [ "${existingdb}" == "DROP_BEFORE" ]; then
      dropdatabase "${dbname}"
      if [ $ERRCODE -gt 0 ]; then return; fi
    fi

    # Check if database exists, create if neccessary (a temp database will never exist, but the check doesn't hurt)
    t=$(dbexists "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${MAINTDB}" "${RESTOREDB}" )
    if [ ${t} -eq 0 ]; then
      # create database
      local ec=$(createdatabase ${RESTOREDB} ${tblspchandling})
      # if this fails, we'll bail out
      if [ "$ec" != "0" ]; then
        MSG="database creation failed for database ${RESTOREDB}"
        RESULT="ERROR"
        return
      fi
    fi

    # Check if schema creation information is present; create if required, skip when doing a DATA only restore
    if [ "`${PGBIN}/pg_restore -l --create ${restoreoptions} ${DUMP} | grep 'SCHEMA'`" == "" ] || [ "${restoreschema}" != "*" ]; then 
      log "INFO" "existing schema required, check for existence"
      t=$(schemaexists "${pgsqlhost}" "${pgsqlport}" "${pgsqlsuperuser}" "${RESTOREDB}"  "${restoreschema}" )
      if [ ${t} -eq 0 ]; then
        ec=$( createschema "${restoreschema}" )
        if [ "$ec" != "0" ]; then
          MSG="schema creation failed for ${restoreschema}"
          RESULT="ERROR"
          return
        fi
      fi
    fi
  fi

  # restore, depends on DATA/SCHEMA/FULL
  log "INFO" "processing - restore to database ${RESTOREDB} started"
  talk "processing - restore to database ${RESTOREDB} started"
  if [ "${restoreschema}" == "*" ]; then
    snaplog "INFO" "restore started: pg_restore ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --dbname=${RESTOREDB} ${restoreoptions} ${DUMP}"
    eval "${PGBIN}/pg_restore ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --dbname=${RESTOREDB} ${restoreoptions} ${DUMP} >> ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log 2>&1"
  else
    snaplog "INFO" "restore started: pg_restore ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --dbname=${RESTOREDB} --schema=${restoreschema} ${restoreoptions} ${DUMP}"
    eval "${PGBIN}/pg_restore ${pgsqlhost} -p ${pgsqlport} -U ${pgsqlsuperuser} --no-password --dbname=${RESTOREDB} --schema=${restoreschema} ${restoreoptions} ${DUMP} >> ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log 2>&1"
  fi
  # sjek ze results
  if [ "$?" == "0" ]; then
    log "INFO" "processing - restore to database ${RESTOREDB} completed"
  elif [ "${DIRECTRESTORE}" == "YES" ]; then
    MSG="processing - restore to database ${RESTOREDB} failed; details: $$.${JOBID}.pgsnap_restore.log"
    RESULT="ERROR"
    return
  else
    MSG="processing - restore to database ${RESTOREDB} failed, trying to drop temp database; details: $$.${JOBID}.pgsnap_restore.log"
    RESULT="ERROR"
    ec=$(dropdatabase "${RESTOREDB}")
    return
  fi
 
  # When restored in a temp database, move stuff in place 
  # restore type DATA or restore from a dump of a specific schema: no database manipulation
  if [ "${DIRECTRESTORE}" == "NO" ]; then
   # drop/move original after restore
    if [ "${existingdb}" == "DROP" ]; then
      dropdatabase "${dbname}"
      if [ ${ERRCODE} -gt 0 ]; then return; fi 
    elif  [ "${existingdb}" == "RENAME" ]; then
      # always drop existing backup in rename scenario
      dropdatabase "${dbname}_pgsnapman_rs_bak"
      if [ ${ERRCODE} -gt 0 ]; then return; fi 
      renamedatabase "${dbname}" "${dbname}_pgsnapman_rs_bak"
      if [ ${ERRCODE} -gt 0 ]; then return; fi 
    fi

    # move in place
    renamedatabase "${RESTOREDB}" "${dbname}"
    if [ ${ERRCODE} -gt 0 ]; then return; fi 
  
    # Only when USE_ROLE
    if [ "${rolehandling}" == "USE_ROLE" ]; then
      # set owner
      setdatabaseowner ${dbname}
      # set global acl and allow connections
      setaclallowconnect ${dbname}
    fi
  fi 
 
  # end DATA exclusion
  MSG="restored dump of $(getfieldvalue "${DBSETTINGS}" 1) -> ${pgsqlfqdn}:${pgsqlport}/${dbname}"
  RESULT="COMPLETED"
}

# ==========================================
# MAIN
# ==========================================

# Get restore information from the database, startup specials
# - should check backup catalog for SUCCESS of the specific dump job, but not in case of a TRIGGER start (catalog entry probably not present)
# - we don't want to start a new restore operation while this one is running (same for backups, but there it gives system load/lockup, restore
#   could potentially break integrity), this is handle lock function.

ERRCODE=0
MSG=""

# Write start log entry, if it fails: we can't use the database properly, break out
logstart 
if [ ${ERRCODE} -gt 0 ]; then
  snaplog "ERROR" "$MSG"
  cleanupexit 1
fi

# Verify starttype
if [[ ! "${STARTTYPE}" =~ ^((CRON|SINGLE|TRIGGER))$ ]]; then
  logend "ERROR" "wrong start type (${STARTTYPE})"
  cleanupexit 1
fi

# REMARK Check if already running AFTER obtaining full path information, as we need to write this info to the lock file
# (the clean up tool uses it to prevent a dump being used from deleting)

# Get restore job information
restorejob="$(getrestorejob ${JOBID})"
if [ "${restorejob}" == "" ]; then
  logend "ERROR" "job id ${JOBID} not found or of wrong type (${STARTTYPE})"
  cleanupexit 1
fi
# Get the various restore job fields
catalogid="$(getfieldvalue "${restorejob}" 2)"
dbname="$(getfieldvalue "${restorejob}" 3)"
restoretype="$(getfieldvalue "${restorejob}" 4)"
restoreschema="$(getfieldvalue "${restorejob}" 5)"
restoreoptions="$(getfieldvalue "${restorejob}" 6)"
existingdb="$(getfieldvalue "${restorejob}" 7)"
cron="$(getfieldvalue "${restorejob}" 8)"
status="$(getfieldvalue "${restorejob}" 9)"
comment="$(getfieldvalue "${restorejob}" 10)"
jobtype="$(getfieldvalue "${restorejob}" 11)"
pgsqlfqdn="$(getfieldvalue "${restorejob}" 12)"
pgsqlport="$(getfieldvalue "${restorejob}" 13)"
pgsqlsuperuser="$(getfieldvalue "${restorejob}" 14)"
rolehandling="$(getfieldvalue "${restorejob}" 15)"
tblspchandling="$(getfieldvalue "${restorejob}" 16)"
pgsqlstatus="$(getfieldvalue "${restorejob}" 17)"

# Check active status
# Always stop when pgsql set to inactive
if [ "${pgsqlstatus}" == "HALTED" ]; then
  logend "ERROR" "restore job ${JOBID} requested on an inactive postgres instance [${pgsqlhost}:${pgsqlport}]"
  cleanupexit 1
fi
# On a scheduled start (CRON), quit when job is halted
if [ "${STARTTYPE}" == "CRON" ] && [ "${status}" != "ACTIVE" ]; then
  logend "ERROR" "scheduled restore job ${JOBID} requested which is is on halt (hint: manual start as SINGLE job overrides the HALTED status)"
  cleanupexit 1
fi

# We might need to get the path (in case DUMP is only numeric, it must be a catalog id, turn
# it into a full path with catalog based information)
if [[ "${DUMP}" =~ ^[0-9]+$ ]]; then
  catalogid=${DUMP}
  DUMP=$(getdumppathfromcatalog ${catalogid})
fi
# Figure out type (cluster/sql or database/directory dump), strip of .sql.gz
if [[ "${DUMP}" =~ .sql.gz$ ]]; then
  dumptype=SQL
  DUMP=`echo "${DUMP}" | sed -E 's/.sql.gz$//g'`
else
  dumptype=DIR
fi

# Check status of the backup job (we ignore this in case of a trigger job)
if [ ! -e ${DUMP}.catalog.dat ] || [ "$(getbackupstatus ${DUMP}.catalog.dat)" != "SUCCESS" ]; then
  logend "ERROR" "backup ${DUMP} does not exist, or failed, restore not started" 
  cleanupexit 1
fi

pgsqlhost=$(resolvepghost ${pgsqlfqdn})

# Set postgres destination server version (also connection test)
setpgbinpath
if [ "${PGBIN}" == "" ]; then
  logend "ERROR" "could not connect to target database"
  cleanupexit 1
fi

# Set the options
if [ "${dumptype}" == "SQL" ]; then
  log "INFO" "schema, tablespace and owner/privilege options are ignored in SQL mode"
else
  if [ "${restoretype}" == "DATA" ]; then 
    restoreoptions="${restoreoptions} --data-only"
  fi
  if [ "${restoretype}" == "SCHEMA" ]; then 
    restoreoptions="${restoreoptions} --schema-only"
  fi
  if [ "${rolehandling}" == "NO_ROLE" ]; then
    restoreoptions="${restoreoptions} --no-owner --no-privileges"
  fi
  if [ "${tblspchandling}" == "NO_TBLSPC" ]; then
    restoreoptions="${restoreoptions} --no-tablespaces"
  fi
fi

# Be talkative
if [ "${VERBOSITY}" == "VERBOSE" ]; then
  echo ""
  echo "dump catalog id         ${catalogid}"
  echo ""
  echo "destination host:       ${pgsqlfqdn} (version: $PGVERSION)"
  echo "destination port:       ${pgsqlport}"
  echo "destination db name:    ${dbname}"
  echo "destination superuser:  ${pgsqlsuperuser}"
  echo "destination status:     ${pgsqlstatus}"
  echo ""
  echo "restore type:           ${restoretype}"
  echo "restore schema:         ${restoreschema}"
  echo "full restore options:   ${restoreoptions}"
  echo "existing db:            ${existingdb}"
  echo "cron:                   ${cron}"
  echo "status:                 ${status}"
  echo "comment:                ${comment}"
  echo "job type:               ${jobtype}"
  echo "role handling:          ${rolehandling}"
  echo "tablespace handling:    ${tblspchandling}"
  echo ""
  echo "full dump path:         ${DUMP}"
  echo "dump type:              ${dumptype}"
  echo ""
fi

# Check if already running, quit if so, exit code 0 (its not an error).
if [ "$(isjobrunning ${JOBID})" == "0" ]; then
  lock ${JOBID} "${DUMP}"
else
  cleanupexit 0
fi

# Log message
log "INFO" "starting ${STARTTYPE} restore, job id [${JOBID}] from dump [`basename ${DUMP}`]"
snaplog "INFO" "init - starting ${STARTTYPE} restore, job id [${JOBID}] from dump [`basename ${DUMP}`]"

# Start psql or pg_restore operation, set job status to started in case of a SINGLE run job
RESULT="ERROR"
ERRCODE=0
if [ "${jobtype}" == "SINGLE" ]; then
  setjobstatus "RESTORE" ${JOBID} "HALTED"
fi
if [ $ERRCODE -gt 0 ]; then
  MSG="aborted as job status could not be set, indicates a catalog database error"
else
  snaplog "INFO" "logging details to: $$.${JOBID}.pgsnap_restore.log"
  if [ "${dumptype}" == "DIR" ]; then
    if [ "${VERBOSITY}" == "VERBOSE" ]; then
      run_dir_restore
    else
      run_dir_restore > /dev/null
    fi
  elif  [ "${dumptype}" == "SQL" ]; then
    # we can't get rid of all console output within the function, must be done here
    if [ "${VERBOSITY}" == "VERBOSE" ]; then
      run_sql_restore
    else
      run_sql_restore > /dev/null
    fi
  fi
fi
logend "$RESULT" "$MSG"

talk "SQL error log: ${LOGDIR}/$$.${JOBID}.pgsnap_restore.log"

# Normal end
if [ "${RESULT}" == "ERROR" ]; then
  cleanupexit 1
else
  cleanupexit 0
fi

logend "$RESULT" "$MSG"
cleanupexit ${ERRCODE}

# EOF

