#!/bin/bash

# pgsnap_singlejob Checks for jobs marked as single run, downloads configuration and starts the jobs.
#
# $1 verbosity [VERBOSE|SILENT]
# $2 job type (optional, for manual runs)
# $3 job id (optional, for manual runs)

# ======================================
# Initialization
# ======================================
VERBOSITY=$1
# We must set the verbosity, as otherwise it propagates to the other tools that are started, and
# then the commandline options would shift.
if [ "${1}" == "" ]; then
  VERBOSITY="SILENT"
else
  VERBOSITY=$1
fi

# Get the script directory (must do this first)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Catalog database needed?
PGSCDB_REQUIRED=YES

# Turn off tool init log (otherwise it would flood it, on a minutely check schedule)
LOGINIT=NO

# Load functions, will also perform initialization operations
. ${SCRIPTPATH}/pgsnap_lib

# =======================================
# Script specific functions
# =======================================

# Start dump jobs
function startdumpjobs {
  local line
  local jobfile=${TEMPDIR}/$$.0.singledumpjobs.list
  while read line; do
    jobid=$(getfieldvalue "${line}" 1)
    pgsqlid=$(getfieldvalue "${line}" 3)
    pgsqlhost=$(getfieldvalue "${line}" 16)
    pgsqlport=$(getfieldvalue "${line}" 17)
    pgsqlsuperuser=$(getfieldvalue "${line}" 18)
    dbname=$(getfieldvalue "${line}" 4)
    butype=$(getfieldvalue "${line}" 5)
    schema=$(getfieldvalue "${line}" 6)
    dumpoptions=$(getfieldvalue "${line}" 20)
    cron=$(getfieldvalue "${line}" 7)
    jobstatus=$(getfieldvalue "${line}" 13)
    jobtype=$(getfieldvalue "${line}" 14)
    restorejobid=$(getfieldvalue "${line}" 19)
    # Set schema_part for the dump name
    if [ "${schema}" == "*" ]; then
      schema_part=""
    else
      dumpoptions="--schema=${schema} ${dumpoptions}"
      schema_part="."${schema}
    fi

    # Display a lot of data in verbose mode
    if  [ "$VERBOSITY" == "VERBOSE" ]; then
      echo "job file:       ${jobfile}"
      echo "jobid:          ${jobid}"
      echo "job status:     ${jobstatus}"
      echo "job type:       ${jobtype}"
      echo ""
      echo "Starting single run dump job"
      echo ""
    fi

    # Start the dump, use this job's pid as key to the job list
    ${SCRIPTPATH}/pgsnap_dump ${pgsqlid}_${pgsqlhost}_${pgsqlport} ${jobid} ${VERBOSITY} SINGLE $$ &
  done < ${jobfile}
}

function startrestorejobs {
  local line
  while read line; do
    talk "single restore job ids: ${line}"
    ${SCRIPTPATH}/pgsnap_restore "$(getfieldvalue "${line}" 1)" "$(getfieldvalue "${line}" 2)" ${VERBOSITY} SINGLE &
  done < ${TEMPDIR}/$$.0.singlerestorejobs.list
}

# =======================================
# MAIN
# =======================================
# Check if there are any single dump jobs that have not run

JOBID=0
# Check if already running, quit if so, exit code 0 (its not an error).
if [ "$(isjobrunning ${JOBID})" == "0" ]; then
  lock ${JOBID} "${0} ${1} ${2} ${3} ${4} ${5}"
else
  cleanupexit 0
fi

# Check if anything to do
if [ "${3}" == "" ]; then
  id="%"
else
  id=${3}
fi

if [[ ! ${id} =~ ^[%0-9]*$ ]]; then
  talk "id format not correct (empty, % or number)":
  cleanupexit 1
fi 

# Display information
if [ "$VERBOSITY" == "VERBOSE" ]; then
  echo ""
  echo "+--------------------+"
  echo "| pgsnap_singlejob   |"
  echo "+--------------------+"
  echo ""
  echo "Config file:              ${CONFIGFILE}"
  echo ""
  echo "PgSnapman worker fqdn:    ${FQDN}"
  echo "PgSnapman worker id:      ${BUWORKERID}"
  echo "PgSnapman config cron     ${CACHECONFIGCRON}"
  echo "PgSnapman clean cron      ${CLEANCRON}"
  echo "PgSnapman single job cron ${SINGLEJOBCRON}"
  echo ""
  echo "Global pgsnapman catalog db"
  echo "  db:   ${PGSCDB}"
  echo "  host: ${PGSCHOST}"
  echo "  port: ${PGSCPORT}"
  echo "  user: ${PGSCUSER}"
  echo ""
  echo "Specific job type:        ${2}"
  echo "Specific id:              ${id}"
  echo ""
  echo "Postgres instances managed by pgsnapman:"
  echo "id|dns_name|pgport|comment|status|pgsuperuser|bu_window_start|bu_window_end|pgsql_worker_id_default"
  cat $ROOTDIR/pg_instances.list
  echo ""
fi

# DUMP jobs
c=0
if [ "${2}" != "RESTORE" ]; then
  talk "Checking for single run dump jobs"
  sql="select count(*) from vw_dumpjob_worker_instance \
    where pgsnap_worker_id = ${BUWORKERID} \
      and jobtype = 'SINGLE' \
      and status = 'ACTIVE' \
      and cron = '* * * * *' \
      and id::text like '${id}';"
  c=$( catdbquery "${sql}" )
  if [ $c -eq 0 ]; then
    talk "Nothing to do"
  else
    # Need to download config data, as new pgsql instances may be added
    talk "Starting cacheconfig to download list of single run jobs, as well as configure the data store for new pgsql instances"
    ${SCRIPTPATH}/pgsnap_cacheconfig SILENT SINGLE $$
    # Start the dumps
    talk "Start the dump jobs..."
    snaplog "INFO" "single dump jobs found, starting"
    startdumpjobs
  fi
  talk ""
fi

# Be careful: do not clean up the dumpjob file, as it will be used by the pgsnap_dump script, and we don't know
# for sure when they're ready dealing with it. The pgsnap_clean tool will take care of it.


# RESTORE jobs
let " MAXSTART = ${MAX_PARALLEL_RESTORE:-2} - $( nrunning pgsnap_restore )"
c=0
if [ "${2}" != "DUMP" ]; then
  talk "Checking for single run restore jobs"
  sql="select count(*) from pgsnap_restorejob r join pgsnap_catalog c on r.pgsnap_catalog_id = c.id \
    where r.status = 'ACTIVE' \
      and r.jobtype = 'SINGLE' \
      and r.cron = '* * * * *' \
      and r.id::text like '${id}'
      and c.bu_worker_id = ${BUWORKERID};"
  c=$( catdbquery "${sql}" )
  if [ $c -eq 0 ]; then
    talk "Nothing to do"
  else
    # Start max allowed jobs, other jobs will have to wait
    if [ $c -gt ${MAXSTART} ]; then
      MSG="too many jobs requested, starting maximum ${MAXSTART} out of $c restore jobs"
      talk "${MSG}"
      snaplog "WARNING" "${MSG}"
    fi
    sql="select r.id as restore_id, c.id as catalog_id from pgsnap_restorejob r join pgsnap_catalog c on r.pgsnap_catalog_id = c.id \
      where r.status = 'ACTIVE' \
        and r.jobtype = 'SINGLE' \
        and r.cron = '* * * * *' \
        and r.id::text like '${id}' \
        and c.bu_worker_id = ${BUWORKERID} \
      limit ${MAXSTART};"
    catdbquerytofile "${sql}" "${TEMPDIR}/$$.0.singlerestorejobs.list"
    # Start the restores
    talk "Start the restore jobs..."
    snaplog "INFO" "single restore jobs found, starting"
    startrestorejobs
  fi
  talk ""
fi
cleanupexit 0

