#!/bin/bash

# pgsnap_upload: uploads status information to the central configuration database
#                     must run on a backup worker, with passwordless (.pgpass does the job) to the
#                     central configuration database
# Actions taken:
#   1 reads all files to upload from the pgsnapman root upload directory
#   2 uploads data to the corresponding table


# ============================
# Init stuff
# ============================

# Get a usable timestamp
INITIMESTAMP=`date '+%Y%m%dT%H%M%S'`

# Settings/cmd args
CONFIGFILE=/etc/pgsnapman/pgsnapman.config
VERBOSITY=$1

# Get the script directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Try to find the config file, check and read
if [ ! -e ${CONFIGFILE} ]; then
  CONFIGFILE=${SCRIPTPATH}/pgsnapman.config
fi
if [ -e ${CONFIGFILE} ]; then
. ${CONFIGFILE}
else
  echo "ERROR ${INITIMESTAMP} init upload failed - config file not found: ${CONFIGFILE}"
  exit 1
fi

# ============================
# Functions
# ============================

# Upload the data for the backup catalog table
# (no parameters)
function uploadcatalogdata {
  # Find all files
  find ${ROOTDIR}/upload -name '*.catalog.dat' > ${ROOTDIR}/upload/catalogdata.list
  while read line; do
    echo -e "\.\n" | cat ${line} - | ${PGSCBIN}/psql -h ${PGSCHOST} -p ${PGSCPORT} -U ${PGSCUSER} --dbname=${PGSCDB} -c "\COPY pgsnap_catalog (pgsnap_dumpjob_id, starttime, endtime, status, bu_name, bu_location, dbsize, dumpsize) FROM stdin"
    if [ "$?" == "0" ]; then
      echo "INFO `date '+%Y%m%dT%H%M%S'` uploaded catalog data: ${line}" >> ${PGSNAPMANLOG}
    else
      echo "ERROR `date '+%Y%m%dT%H%M%S'` uploading catalog data failed: ${line}" >> ${PGSNAPMANLOG}
    fi
    rm ${line}
  done < ${ROOTDIR}/upload/catalogdata.list
  rm -f ${ROOTDIR}/upload/catalogdata.list
}

# ================================================================================
# MAIN
# ===============================================================================

# Own hostname, id, (we don't need it, but is a handy check if we can
# connect to the catalog server, quit with error if it does not work)
FQDN=`hostname -f`
BUWORKERID=`${PGSCBIN}/psql -h ${PGSCHOST} -p ${PGSCPORT} -U ${PGSCUSER} --dbname=${PGSCDB} -F '|' -A -t -c "SELECT get_pgsnap_worker_id('${FQDN}');"`
if [ "$?" != "0" ]; then
  echo "ERROR ${INITIMESTAMP} init upload - could not connect catalog server (fatal)" >> ${PGSNAPMANLOG}
  exit 2
else
  if [ "${BUWORKERID}" == "" ]; then
    echo "ERROR ${INITIMESTAMP} init upload - worker has no jobs (fatal)" >> ${PGSNAPMANLOG}
    exit 3
  fi
fi

# Started, write log entry
echo "INFO ${INITIMESTAMP} init upload" >> ${PGSNAPMANLOG}

# Display information
if [ "$VERBOSITY" == "VERBOSE" ]; then
  echo ''
  echo '+--------------------+'
  echo '| pgsnap_upload      |'
  echo '+--------------------+'
  echo ''
  echo 'Config file:           '${CONFIGFILE}
  echo ''
  echo 'PgSnapman worker fqdn: '${FQDN}
  echo 'PgSnapman worker id:   '${BUWORKERID}
  echo ''
  echo 'Global pgsnapman catalog db'
  echo '  db:   '${PGSCDB}
  echo '  host: '${PGSCHOST}
  echo '  port: '${PGSCPORT}
  echo '  user: '${PGSCUSER}
  echo ''
fi

uploadcatalogdata 

exit 0

