#!/bin/bash

# pgsnap_upload: uploads status information to the central configuration database
#                     must run on a backup worker, with passwordless (.pgpass does the job) to the
#                     central configuration database
# Actions taken:
#   1 reads all files to upload from the pgsnapman root upload directory
#   2 uploads data to the corresponding table

# ======================================
# Initialization
# ======================================
VERBOSITY=$1

# Get the script directory (must do this first)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTPATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Catalog database needed?
PGSCDB_REQUIRED=YES

# Load functions, will also perform initialization operations
. ${SCRIPTPATH}/pgsnap_lib

# ============================
# Functions
# ============================

# Generic upload function, searches for files in upload dir, name pattern: '*.<destination>.dat'
# $1 *.<destination>.dat file to upload to the catalog database table pgsnap_<destination>
function uploaddata {
  local format=`echo "${1}" | awk -F '.' '{print $(NF-1)}'`
  # Set SQL
  if [ "${format}" == "message" ]; then
    sql="\COPY pgsnap_message (logtime, level, pgsnap_tool,  message) FROM stdin";
  elif [ "${format}" == "catalog" ]; then
    sql="\COPY pgsnap_catalog (pgsnap_dumpjob_id, starttime, endtime, status, bu_name, bu_location, dbsize, dumpsize) FROM stdin"
  else
    snaplog "ERROR" "destination format unknown"
    return
  fi

  # Upload the data
#  echo -e "\.\n" | cat ${1} - | ${PGSCBIN}/psql ${PGSCHOST} -p ${PGSCPORT} -U ${PGSCUSER} --dbname=${PGSCDB} -c "${sql}" 2> ${TEMPDIR}/pgsnap_upload.psql.log
  echo -e "\.\n" | cat ${1} - | ${PGSCBIN}/psql ${PGSCHOST} -p ${PGSCPORT} -U ${PGSCUSER} --dbname=${PGSCDB} -c "${sql}" > /dev/null
  if [ "$?" == "0" ]; then
    snaplog "INFO" "processing - finished uploading `basename ${1}`"
    rm -f ${1}
  else
    snaplog echo "ERROR" "processing - failed uploading data (connection error): `basename ${1}`"
  fi
#  else
#    # Inspect log, read first line (makes a difference: without connection, we leave the upload in place, an invalid data file must be removed)
#    if [ "`grep -E '^psql' ${TEMPDIR}/upload/pgsnap_upload.psql.log`" == "" ]; then 
#      snaplog "ERROR" "processing - failed uploading data (SQL/data error): `basename ${1}` - data `cat ${1}`"
#      # remove illegal file
#      rm -f ${1}
#    else
#      snaplog echo "ERROR" "processing - failed uploading data (connection error): `basename ${1}`"
#    fi
#  fi
#  rm -f ${TEMPDIR}/pgsnap_upload.psql.log
}


# ================================================================================
# MAIN
# ===============================================================================
# Tool log
TOOL_LOG=${ROOTDIR}/pgsnap_cacheconfig.log 

# Display information
if [ "$VERBOSITY" == "VERBOSE" ]; then
  echo ""
  echo "+--------------------+"
  echo "| pgsnap_upload      |"
  echo "+--------------------+"
  echo ""
  echo "Config file:           ${CONFIGFILE}"
  echo ""
  echo "PgSnapman worker fqdn: ${FQDN}"
  echo "PgSnapman worker id:   ${BUWORKERID}"
  echo ""
  echo "Global pgsnapman catalog db"
  echo "  db:   ${PGSCDB}"
  echo "  host: ${PGSCHOST}"
  echo "  port: ${PGSCPORT}"
  echo "  user: ${PGSCUSER}"
  echo ""
fi

# Upload the data for the available categories
files=`find ${ROOTDIR}/upload -name "*.dat"`
for f in ${files}; do
  uploaddata "${f}"
done

exit 0

